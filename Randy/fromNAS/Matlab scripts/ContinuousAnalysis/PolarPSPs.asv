function [psp, nspikes, x, Vm] = PolarPSPs(filepath, duration, stimOnset, winstart, winend)
%
% POLARPSPS(FILEPATH, DURATION, STIMONSET, WINSTART, WINEND)
% Computes PSP and spike polar plots for whole cell recording contained in
% a .dat file specified by FILEPATH.
%
% Randy Bruno, June 2003

if (nargin == 0)
    [filename pathname OK] = uigetfile('*.dat', 'Select continuous signal file');
    if (~OK) return; end
    filepath = [pathname, filename];
    duration = input('Trial duration in msec: ');
    stimOnset = input('Stimulus onset: ');
    winstart = input('Start of response window: ');
    winend = input('End of response window: ');
end
if (nargin == 3)
    answers = str2num(cell2mat(inputdlg({'Window Start (ms)', 'Window End (ms)'}, 'Parameters for polar plots', 1, {'150', '200'})));
    winstart = answers(1);
    winend = answers(2);
end

stimuli = ReverseArray(GetStimCodes(filepath, duration));
nStim = length(stimuli);

SCALINGFACTOR = 100;
SAMPLERATE = 32000; % in Hz
nScans = SAMPLERATE * (duration / 1000);
x = linspace(0, duration, nScans);
recSize = (nScans + 1) * 4; %in bytes

fid = fopen(filepath, 'r', 'b');
headerSize = SkipHeader(fid);

% average each condition separately
n = zeros(nStim, 1); % number of reps for each stimulus
average = zeros(nScans, nStim);
potentials = zeros(nScans, nStim);
spikes = zeros(1000, nStim); % spiketimes for the entire trial
nspikes = zeros(nStim, 1); % # of spikes in entire trial
respspikes = zeros(nStim, 1); % # of spikes in response window
spon = 0; % # of spontaneous spikes (spikes preceeding stimOnset)
while (~feof(fid))
    stimulus = fread(fid, 1, 'float32');
    if (feof(fid) | isempty(stimulus)) break; end;
    signal = fread(fid, nScans, 'float32');
    if (feof(fid) | isempty(signal)) break; end;
    i = PositionInArray(stimuli, stimulus);
    n(i) = n(i) + 1;

    average(:, i) = MemorylessAverage(average(:, i), signal, n(i));
    
    fsignal = medfilt1(signal, SAMPLERATE/1000 * 5); % 5-ms window median filter
%    figure;
%    subplot(3,1,1);
%    plot(x, signal);
%    subplot(3,1,2);
%    plot(x, fsignal);
%    subplot(3,1,3);
%    plot(x, signal-fsignal);
%    input('press enter to continue');
    potentials(:, i) = MemorylessAverage(potentials(:, i), fsignal, n(i));

    %subtract median-filtered signal from raw signal to isolate spikes and
    %then threshold
    spiketimes = threshold((signal - fsignal)*SCALINGFACTOR, 10, 64) / (SAMPLERATE / 1000);
    if (length(spiketimes) > 0)
        spikes((nspikes(i)+1):(nspikes(i)+length(spiketimes)), i) = spiketimes;
        nspikes(i) = nspikes(i) + length(spiketimes);
        respspikes(i) = respspikes(i) + length(spiketimes(spiketimes >= winstart & spiketimes <= winend));
        spon = spon + length(spiketimes(spiketimes < (stimOnset - 10)));
    end
end
fclose(fid);

figure;
% plot averages of median-filtered signals
minimum = min(min(average)) * SCALINGFACTOR;
maximum = max(max(average)) * SCALINGFACTOR;
for i = 1:nStim
    subplot(nStim, 3, 3*i-2);
    plot(x, potentials(:, i) * SCALINGFACTOR);
    set(gca, 'Box', 'Off');
    axis([0 duration minimum maximum]);
    if (nargin == 3)
        line([stimOnset stimOnset], [minimum, maximum], 'Color', 'green');
    end
    if (i < nStim)
        set(gca, 'XTickLabel', '');
        xlabel('');
    end
    if (i == floor(nStim/2))
        ylabel('Vm')
    end
    title(['angle = ', num2str(StimCodeToDegrees(stimuli(i))), '; stimCode = ', num2str(stimuli(i))]);
end
xlabel('msec');

% plot spike PSTHs
maximum = 0;
for i = 1:nStim
    subplot(nStim, 3, 3*i-1);
    spiketimes = spikes(1:nspikes(i), i);
    if (isempty(spiketimes))
        bins = linspace(1, duration, duration);
        y = zeros(1, duration);
    else
        % 1-msec wide bins
        [y, bins] = hist(spiketimes, max(spiketimes));
        y = y / n(i);
        maximum = max(maximum, max(y));
    end
    bar(bins, y);
    set(gca, 'Box', 'Off');
    xlim([1 duration]);
    if (i < nStim)
        set(gca, 'XTickLabel', '');
        xlabel('');
    end
    if (i == floor(nStim/2))
        ylabel('spikes/stim/bin')
    end
end
xlabel('msec');

% put all PSTHs on same scale and indicate response window
for i = 1:nStim
    subplot(nStim, 3, 3*i-1);
    if (i == 1) title(filepath); end
    ylim([0 maximum]);
    hold on;
    area([winstart winstart winend winend], [0 maximum maximum 0], 'FaceColor', 'yellow', 'EdgeColor', 'none');
    hold off;
end

% calculate amplitudes of average PSPs
psp = zeros(nStim, 1);
for i = 1:nStim
    baseline = median(potentials(x < stimOnset, i));
    peak = max(potentials(x >= winstart & x <= winend, i));
    psp(i) = SCALINGFACTOR * (peak-baseline);
end

% calculate stats for spontaneous Vm
excerpts = potentials(x < stimOnset, :) * SCALINGFACTOR;
excerpts = reshape(excerpts, prod(size(excerpts)), 1);
Vm = [mean(excerpts) median(excerpts) min(excerpts) max(excerpts)];
disp(['spontaneous mean = ', num2str(Vm(1)), ...
    ', median = ', num2str(Vm(2)), ...
    ', min = ', num2str(Vm(3)), ...
    ', max = ', num2str(Vm(4))]);

% convert stimcodes to radians
stimuli = StimCodeToDegrees(stimuli');
x = stimuli * pi / 180;

% no breaks in polar plots
x = [x; x(1)];
psp = [psp; psp(1)];
respspikes = respspikes ./ n;
spikes = [respspikes; respspikes(1)];

% PSP polar plot
subplot(nStim, 3, linspace(3,nStim*3/2,nStim/2));
polar([x; x(1)], [psp; psp(1)]); % extra points are needed to prevent breaks in polar plots
ylabel('Vm');
title(['mean PSP = ', num2str(mean(psp)), ', max = ', num2str(max(psp))]);

% spikes polar plot
subplot(nStim, 3, linspace(nStim*3/2+3,nStim*3,nStim/2));
polar([x; x(1)], [spikes);
ylabel('spikes/stim');
title(['spon = ', num2str((1000/(stimOnset-10)) * spon / sum(n)), ...
       ' Hz, mean = ', num2str(mean(spikes)), ...
       ' sp/st, max = ', num2str(max(spikes)), ...
       ' sp/st']);

set(gcf, 'Name', filepath);
plotedit('ON');
