function [Dtrial, Dtime, Dlength] = DetectDownByMeanVar(filepath, duration, interval, Vcrit, varcrit, winstart, winend, trialstart, trialend)

% Detect down states using mean and variance of short intervals of Vm.
%
% INPUTS
% filepath: path to a continuous file generated by ntrode.vi
% duration: record duration in msecs
% interval: discretization interval in msecs for measuring means and variances
% Vcrit: range of voltage from a sweep's minimum voltage for which an
% interval is classified a Down state (in mV). Best to set this around 1-2 mV.
% varcrit: variance criterion, less than which an interval is classified a
% Down state (examination of data suggests that good settings for this are in the
% range of 0.05 to 0.1)
% winstart: start of period to evaluate in msecs (e.g., for avoiding
% initial series resistance monitoring pulse)
% winend: end of period to evaluate
% trialstart: first trial to evaluate
% trialend: last trial to evaluate
%
% Randy Bruno, February 2006

if (nargin == 0)
    [filename pathname OK] = uigetfile('*.dat', 'Select continuous signal file');
    if (~OK) return; end
    filepath = [pathname, filename];
end

if nargin < 9
    answers = inputdlg({'duration (ms)', 'interval (ms)', 'V criterion (mV)', 'variance criterion', 'window start (ms)', 'window end (ms)', 'trial start', 'trial end'}, ...
            'Parameters', 1, {'5000', '20', '2', '0.1', '300', '5000', '0', '1000'});
    duration = str2num(answers{1});
    interval = str2num(answers{2});
    Vcrit = str2num(answers{3});
    varcrit = str2num(answers{4});
    winstart = str2num(answers{5});
	winend = str2num(answers{6});
	trialstart = str2num(answers{7});
    trialend = str2num(answers{8});
end

SCALINGFACTOR = 100;
SAMPLERATE = 32000; % in Hz
SAMPLESPERMS = SAMPLERATE / 1000;
nScans = SAMPLERATE * (duration / 1000);
X = linspace(0, duration, nScans);

nRecs = GetNumberOfRecords(filepath, duration);
if trialend > nRecs
    trialend = nRecs-1;
end

disp(filepath);
fid = fopen(filepath, 'r', 'b');
headerSize = SkipHeader(fid);

figure;
Dtrial = [];
Dtime = [];
Dlength = [];
for i = trialstart:trialend
    [stimcode, signal] = GetRecord(fid, headerSize, duration, i);
    signal = signal * SCALINGFACTOR;
    meanV = [];
    varV = [];
    for j = winstart:interval:(winend-interval)
        excerpt = signal(X >= j & X < j+interval);
        meanV = [meanV; mean(excerpt)];
        varV = [varV; var(excerpt)];
    end
    subplot(2,1,1);
    winsignal = signal(X >= winstart & X <= winend);
    plot(X(X >= winstart & X <= winend), winsignal);
    xlim([winstart winend]);
    box off;
    title(['record # ' num2str(i)]);
    subplot(2,1,2);
    scatter(meanV, varV);
    ylim([0 .5]);
    subplot(2,1,1);
    last = -1;
    for j = 1:length(meanV)
        minWinSignal = min(winsignal);
        if (varV(j) < varcrit) & (meanV(j) < minWinSignal+Vcrit) 
            line([winstart+(j-1)*interval winstart+j*interval], [minWinSignal minWinSignal], ...
                'Color', 'red', 'LineWidth', 2);
            if j ~= last+1
                Dtrial = [Dtrial; i];
                Dtime = [Dtime; winstart+(j-1)*interval];
                Dlength = [Dlength; interval];
            else
                Dlength(end) = Dlength(end) + interval;
            end
            last = j;
        end
    end
    drawnow;
end
fclose(fid);
